//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FormMainMenu
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MarikinaOpticalEntities : DbContext
    {
        public MarikinaOpticalEntities()
            : base("name=MarikinaOpticalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblContactLens> tblContactLens1 { get; set; }
        public virtual DbSet<tblContactLensRemarks> tblContactLensRemarks1 { get; set; }
        public virtual DbSet<tblOpticalLens> tblOpticalLens1 { get; set; }
        public virtual DbSet<tblOpticalLensRemarks> tblOpticalLensRemarks1 { get; set; }
        public virtual DbSet<tblPatients> tblPatients1 { get; set; }
        public virtual DbSet<tblPatientsContactLens> tblPatientsContactLens1 { get; set; }
        public virtual DbSet<tblPatientsOpticalLens> tblPatientsOpticalLens1 { get; set; }
        public virtual DbSet<tblContactLensDoctor> tblContactLensDoctors { get; set; }
        public virtual DbSet<tblOpticalLensDoctor> tblOpticalLensDoctors { get; set; }
        public virtual DbSet<tblUserAccount> tblUserAccounts { get; set; }
    
        public virtual ObjectResult<GetPatients_Result> GetPatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatients_Result>("GetPatients");
        }
    
        public virtual int InsertPatient(string serialNumber, string firstName, string middleName, Nullable<byte> gender, Nullable<System.DateTime> dateOfBirth, Nullable<byte> age, string mobileNumber, string telephoneNumber, string houseNo, string street, string barangay, string city, Nullable<System.DateTime> patientDate, string lastName, Nullable<byte> isActive)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(byte));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(byte));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var telephoneNumberParameter = telephoneNumber != null ?
                new ObjectParameter("TelephoneNumber", telephoneNumber) :
                new ObjectParameter("TelephoneNumber", typeof(string));
    
            var houseNoParameter = houseNo != null ?
                new ObjectParameter("HouseNo", houseNo) :
                new ObjectParameter("HouseNo", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var barangayParameter = barangay != null ?
                new ObjectParameter("Barangay", barangay) :
                new ObjectParameter("Barangay", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var patientDateParameter = patientDate.HasValue ?
                new ObjectParameter("PatientDate", patientDate) :
                new ObjectParameter("PatientDate", typeof(System.DateTime));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatient", serialNumberParameter, firstNameParameter, middleNameParameter, genderParameter, dateOfBirthParameter, ageParameter, mobileNumberParameter, telephoneNumberParameter, houseNoParameter, streetParameter, barangayParameter, cityParameter, patientDateParameter, lastNameParameter, isActiveParameter);
        }
    
        public virtual int InsertPatientsContactLens(string serialNumber, Nullable<int> getPatientId)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var getPatientIdParameter = getPatientId.HasValue ?
                new ObjectParameter("GetPatientId", getPatientId) :
                new ObjectParameter("GetPatientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatientsContactLens", serialNumberParameter, getPatientIdParameter);
        }
    
        public virtual int InsertPatientsOpticalLens(string serialNumber, Nullable<int> getPatientId)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var getPatientIdParameter = getPatientId.HasValue ?
                new ObjectParameter("GetPatientId", getPatientId) :
                new ObjectParameter("GetPatientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatientsOpticalLens", serialNumberParameter, getPatientIdParameter);
        }
    
        public virtual ObjectResult<GetPatientsIdResult> GetPatientsId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientsIdResult>("GetPatientsId");
        }
    
        public virtual ObjectResult<string> GetSerialNumber(string serialNumber)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSerialNumber", serialNumberParameter);
        }
    
        public virtual ObjectResult<SearchNameRx_Result> SearchNameRx(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchNameRx_Result>("SearchNameRx", nameParameter);
        }
    
        public virtual ObjectResult<SearchSerialNoRx_Result> SearchSerialNoRx(string serialNumber)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchSerialNoRx_Result>("SearchSerialNoRx", serialNumberParameter);
        }
    
        public virtual ObjectResult<string> GetSerialNumberContactRx(string serialNumber)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSerialNumberContactRx", serialNumberParameter);
        }
    
        public virtual ObjectResult<string> GetSerialNumberOpticalRx(string serialNumber)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSerialNumberOpticalRx", serialNumberParameter);
        }
    
        public virtual int InsertContactLensRemarks(string contactLensSerialNumber, string contactLensRemarks)
        {
            var contactLensSerialNumberParameter = contactLensSerialNumber != null ?
                new ObjectParameter("ContactLensSerialNumber", contactLensSerialNumber) :
                new ObjectParameter("ContactLensSerialNumber", typeof(string));
    
            var contactLensRemarksParameter = contactLensRemarks != null ?
                new ObjectParameter("ContactLensRemarks", contactLensRemarks) :
                new ObjectParameter("ContactLensRemarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertContactLensRemarks", contactLensSerialNumberParameter, contactLensRemarksParameter);
        }
    
        public virtual int InsertOpticalLensRemarks(string opticalLensSerialNumber, string opticalLensRemarks)
        {
            var opticalLensSerialNumberParameter = opticalLensSerialNumber != null ?
                new ObjectParameter("OpticalLensSerialNumber", opticalLensSerialNumber) :
                new ObjectParameter("OpticalLensSerialNumber", typeof(string));
    
            var opticalLensRemarksParameter = opticalLensRemarks != null ?
                new ObjectParameter("OpticalLensRemarks", opticalLensRemarks) :
                new ObjectParameter("OpticalLensRemarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOpticalLensRemarks", opticalLensSerialNumberParameter, opticalLensRemarksParameter);
        }
    
        public virtual int InsertContactLens(string serialNumber, string contactRS, string contactRC, string contactRA, string contactRBC, string contactRDptr, string contactLS, string contactLC, string contactLA, string contactLBC, string contactLDptr, Nullable<System.DateTime> contactDate)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var contactRSParameter = contactRS != null ?
                new ObjectParameter("ContactRS", contactRS) :
                new ObjectParameter("ContactRS", typeof(string));
    
            var contactRCParameter = contactRC != null ?
                new ObjectParameter("ContactRC", contactRC) :
                new ObjectParameter("ContactRC", typeof(string));
    
            var contactRAParameter = contactRA != null ?
                new ObjectParameter("ContactRA", contactRA) :
                new ObjectParameter("ContactRA", typeof(string));
    
            var contactRBCParameter = contactRBC != null ?
                new ObjectParameter("ContactRBC", contactRBC) :
                new ObjectParameter("ContactRBC", typeof(string));
    
            var contactRDptrParameter = contactRDptr != null ?
                new ObjectParameter("ContactRDptr", contactRDptr) :
                new ObjectParameter("ContactRDptr", typeof(string));
    
            var contactLSParameter = contactLS != null ?
                new ObjectParameter("ContactLS", contactLS) :
                new ObjectParameter("ContactLS", typeof(string));
    
            var contactLCParameter = contactLC != null ?
                new ObjectParameter("ContactLC", contactLC) :
                new ObjectParameter("ContactLC", typeof(string));
    
            var contactLAParameter = contactLA != null ?
                new ObjectParameter("ContactLA", contactLA) :
                new ObjectParameter("ContactLA", typeof(string));
    
            var contactLBCParameter = contactLBC != null ?
                new ObjectParameter("ContactLBC", contactLBC) :
                new ObjectParameter("ContactLBC", typeof(string));
    
            var contactLDptrParameter = contactLDptr != null ?
                new ObjectParameter("ContactLDptr", contactLDptr) :
                new ObjectParameter("ContactLDptr", typeof(string));
    
            var contactDateParameter = contactDate.HasValue ?
                new ObjectParameter("ContactDate", contactDate) :
                new ObjectParameter("ContactDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertContactLens", serialNumberParameter, contactRSParameter, contactRCParameter, contactRAParameter, contactRBCParameter, contactRDptrParameter, contactLSParameter, contactLCParameter, contactLAParameter, contactLBCParameter, contactLDptrParameter, contactDateParameter);
        }
    
        public virtual int InsertOpticalLens(string serialNumber, string opticalRS, string opticalRC, string opticalRA, string opticalRPD, string opticalRAdd, string opticalRPrism, string opticalRBase, string opticalROH, string opticalLS, string opticalLC, string opticalLA, string opticalLPD, string opticalLAdd, string opticalLPrism, string opticalLBase, string opticalLOH, Nullable<System.DateTime> opticalDate)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var opticalRSParameter = opticalRS != null ?
                new ObjectParameter("OpticalRS", opticalRS) :
                new ObjectParameter("OpticalRS", typeof(string));
    
            var opticalRCParameter = opticalRC != null ?
                new ObjectParameter("OpticalRC", opticalRC) :
                new ObjectParameter("OpticalRC", typeof(string));
    
            var opticalRAParameter = opticalRA != null ?
                new ObjectParameter("OpticalRA", opticalRA) :
                new ObjectParameter("OpticalRA", typeof(string));
    
            var opticalRPDParameter = opticalRPD != null ?
                new ObjectParameter("OpticalRPD", opticalRPD) :
                new ObjectParameter("OpticalRPD", typeof(string));
    
            var opticalRAddParameter = opticalRAdd != null ?
                new ObjectParameter("OpticalRAdd", opticalRAdd) :
                new ObjectParameter("OpticalRAdd", typeof(string));
    
            var opticalRPrismParameter = opticalRPrism != null ?
                new ObjectParameter("OpticalRPrism", opticalRPrism) :
                new ObjectParameter("OpticalRPrism", typeof(string));
    
            var opticalRBaseParameter = opticalRBase != null ?
                new ObjectParameter("OpticalRBase", opticalRBase) :
                new ObjectParameter("OpticalRBase", typeof(string));
    
            var opticalROHParameter = opticalROH != null ?
                new ObjectParameter("OpticalROH", opticalROH) :
                new ObjectParameter("OpticalROH", typeof(string));
    
            var opticalLSParameter = opticalLS != null ?
                new ObjectParameter("OpticalLS", opticalLS) :
                new ObjectParameter("OpticalLS", typeof(string));
    
            var opticalLCParameter = opticalLC != null ?
                new ObjectParameter("OpticalLC", opticalLC) :
                new ObjectParameter("OpticalLC", typeof(string));
    
            var opticalLAParameter = opticalLA != null ?
                new ObjectParameter("OpticalLA", opticalLA) :
                new ObjectParameter("OpticalLA", typeof(string));
    
            var opticalLPDParameter = opticalLPD != null ?
                new ObjectParameter("OpticalLPD", opticalLPD) :
                new ObjectParameter("OpticalLPD", typeof(string));
    
            var opticalLAddParameter = opticalLAdd != null ?
                new ObjectParameter("OpticalLAdd", opticalLAdd) :
                new ObjectParameter("OpticalLAdd", typeof(string));
    
            var opticalLPrismParameter = opticalLPrism != null ?
                new ObjectParameter("OpticalLPrism", opticalLPrism) :
                new ObjectParameter("OpticalLPrism", typeof(string));
    
            var opticalLBaseParameter = opticalLBase != null ?
                new ObjectParameter("OpticalLBase", opticalLBase) :
                new ObjectParameter("OpticalLBase", typeof(string));
    
            var opticalLOHParameter = opticalLOH != null ?
                new ObjectParameter("OpticalLOH", opticalLOH) :
                new ObjectParameter("OpticalLOH", typeof(string));
    
            var opticalDateParameter = opticalDate.HasValue ?
                new ObjectParameter("OpticalDate", opticalDate) :
                new ObjectParameter("OpticalDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOpticalLens", serialNumberParameter, opticalRSParameter, opticalRCParameter, opticalRAParameter, opticalRPDParameter, opticalRAddParameter, opticalRPrismParameter, opticalRBaseParameter, opticalROHParameter, opticalLSParameter, opticalLCParameter, opticalLAParameter, opticalLPDParameter, opticalLAddParameter, opticalLPrismParameter, opticalLBaseParameter, opticalLOHParameter, opticalDateParameter);
        }
    
        public virtual ObjectResult<SearchDatePatient_Result> SearchDatePatient(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchDatePatient_Result>("SearchDatePatient", dateParameter);
        }
    
        public virtual ObjectResult<SearchFullNamePatient_Result> SearchFullNamePatient(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchFullNamePatient_Result>("SearchFullNamePatient", nameParameter);
        }
    
        public virtual ObjectResult<SearchIdPatient_Result> SearchIdPatient(string patientId)
        {
            var patientIdParameter = patientId != null ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchIdPatient_Result>("SearchIdPatient", patientIdParameter);
        }
    
        public virtual int RemovePatientInformation(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemovePatientInformation", patientIdParameter);
        }
    
        public virtual int UpdatePatientInformation(Nullable<int> patientID, string serialNumber, string firstName, string middleName, string lastName, Nullable<byte> gender, Nullable<System.DateTime> dateOfBirth, Nullable<byte> age, string mobileNumber, string telephoneNumber, string houseNo, string street, string barangay, string city)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(byte));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(byte));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var telephoneNumberParameter = telephoneNumber != null ?
                new ObjectParameter("TelephoneNumber", telephoneNumber) :
                new ObjectParameter("TelephoneNumber", typeof(string));
    
            var houseNoParameter = houseNo != null ?
                new ObjectParameter("HouseNo", houseNo) :
                new ObjectParameter("HouseNo", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var barangayParameter = barangay != null ?
                new ObjectParameter("Barangay", barangay) :
                new ObjectParameter("Barangay", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatientInformation", patientIDParameter, serialNumberParameter, firstNameParameter, middleNameParameter, lastNameParameter, genderParameter, dateOfBirthParameter, ageParameter, mobileNumberParameter, telephoneNumberParameter, houseNoParameter, streetParameter, barangayParameter, cityParameter);
        }
    
        public virtual int InsertContactLensDoctors(string contactLensSerialNumber, string contactLensOptometrist, string contactLensOptician)
        {
            var contactLensSerialNumberParameter = contactLensSerialNumber != null ?
                new ObjectParameter("ContactLensSerialNumber", contactLensSerialNumber) :
                new ObjectParameter("ContactLensSerialNumber", typeof(string));
    
            var contactLensOptometristParameter = contactLensOptometrist != null ?
                new ObjectParameter("ContactLensOptometrist", contactLensOptometrist) :
                new ObjectParameter("ContactLensOptometrist", typeof(string));
    
            var contactLensOpticianParameter = contactLensOptician != null ?
                new ObjectParameter("ContactLensOptician", contactLensOptician) :
                new ObjectParameter("ContactLensOptician", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertContactLensDoctors", contactLensSerialNumberParameter, contactLensOptometristParameter, contactLensOpticianParameter);
        }
    
        public virtual int InsertOpticalLensDoctors(string opticalLensSerialNumber, string opticalLensOptometrist, string opticalLensOptician)
        {
            var opticalLensSerialNumberParameter = opticalLensSerialNumber != null ?
                new ObjectParameter("OpticalLensSerialNumber", opticalLensSerialNumber) :
                new ObjectParameter("OpticalLensSerialNumber", typeof(string));
    
            var opticalLensOptometristParameter = opticalLensOptometrist != null ?
                new ObjectParameter("OpticalLensOptometrist", opticalLensOptometrist) :
                new ObjectParameter("OpticalLensOptometrist", typeof(string));
    
            var opticalLensOpticianParameter = opticalLensOptician != null ?
                new ObjectParameter("OpticalLensOptician", opticalLensOptician) :
                new ObjectParameter("OpticalLensOptician", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOpticalLensDoctors", opticalLensSerialNumberParameter, opticalLensOptometristParameter, opticalLensOpticianParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CountPatientContactLens(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CountPatientContactLens", patientIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CountPatientOpticalLens(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CountPatientOpticalLens", patientIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetLastCheckUpDateOpticalLens(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetLastCheckUpDateOpticalLens", patientIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetLastCheckUpDateContactLens(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetLastCheckUpDateContactLens", patientIdParameter);
        }
    
        public virtual ObjectResult<GetPatientOpticalLens_Result> GetPatientOpticalLens(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientOpticalLens_Result>("GetPatientOpticalLens", patientIdParameter);
        }
    
        public virtual ObjectResult<GetPatientContactLens_Result> GetPatientContactLens(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientContactLens_Result>("GetPatientContactLens", patientIdParameter);
        }
    
        public virtual int UpdatePatientOpticalLens(string serialNumber, string opticalRS, string opticalRC, string opticalRA, string opticalRPD, string opticalRAdd, string opticalRPrism, string opticalRBase, string opticalROH, string opticalLS, string opticalLC, string opticalLA, string opticalLPD, string opticalLAdd, string opticalLPrism, string opticalLBase, string opticalLOH)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var opticalRSParameter = opticalRS != null ?
                new ObjectParameter("OpticalRS", opticalRS) :
                new ObjectParameter("OpticalRS", typeof(string));
    
            var opticalRCParameter = opticalRC != null ?
                new ObjectParameter("OpticalRC", opticalRC) :
                new ObjectParameter("OpticalRC", typeof(string));
    
            var opticalRAParameter = opticalRA != null ?
                new ObjectParameter("OpticalRA", opticalRA) :
                new ObjectParameter("OpticalRA", typeof(string));
    
            var opticalRPDParameter = opticalRPD != null ?
                new ObjectParameter("OpticalRPD", opticalRPD) :
                new ObjectParameter("OpticalRPD", typeof(string));
    
            var opticalRAddParameter = opticalRAdd != null ?
                new ObjectParameter("OpticalRAdd", opticalRAdd) :
                new ObjectParameter("OpticalRAdd", typeof(string));
    
            var opticalRPrismParameter = opticalRPrism != null ?
                new ObjectParameter("OpticalRPrism", opticalRPrism) :
                new ObjectParameter("OpticalRPrism", typeof(string));
    
            var opticalRBaseParameter = opticalRBase != null ?
                new ObjectParameter("OpticalRBase", opticalRBase) :
                new ObjectParameter("OpticalRBase", typeof(string));
    
            var opticalROHParameter = opticalROH != null ?
                new ObjectParameter("OpticalROH", opticalROH) :
                new ObjectParameter("OpticalROH", typeof(string));
    
            var opticalLSParameter = opticalLS != null ?
                new ObjectParameter("OpticalLS", opticalLS) :
                new ObjectParameter("OpticalLS", typeof(string));
    
            var opticalLCParameter = opticalLC != null ?
                new ObjectParameter("OpticalLC", opticalLC) :
                new ObjectParameter("OpticalLC", typeof(string));
    
            var opticalLAParameter = opticalLA != null ?
                new ObjectParameter("OpticalLA", opticalLA) :
                new ObjectParameter("OpticalLA", typeof(string));
    
            var opticalLPDParameter = opticalLPD != null ?
                new ObjectParameter("OpticalLPD", opticalLPD) :
                new ObjectParameter("OpticalLPD", typeof(string));
    
            var opticalLAddParameter = opticalLAdd != null ?
                new ObjectParameter("OpticalLAdd", opticalLAdd) :
                new ObjectParameter("OpticalLAdd", typeof(string));
    
            var opticalLPrismParameter = opticalLPrism != null ?
                new ObjectParameter("OpticalLPrism", opticalLPrism) :
                new ObjectParameter("OpticalLPrism", typeof(string));
    
            var opticalLBaseParameter = opticalLBase != null ?
                new ObjectParameter("OpticalLBase", opticalLBase) :
                new ObjectParameter("OpticalLBase", typeof(string));
    
            var opticalLOHParameter = opticalLOH != null ?
                new ObjectParameter("OpticalLOH", opticalLOH) :
                new ObjectParameter("OpticalLOH", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatientOpticalLens", serialNumberParameter, opticalRSParameter, opticalRCParameter, opticalRAParameter, opticalRPDParameter, opticalRAddParameter, opticalRPrismParameter, opticalRBaseParameter, opticalROHParameter, opticalLSParameter, opticalLCParameter, opticalLAParameter, opticalLPDParameter, opticalLAddParameter, opticalLPrismParameter, opticalLBaseParameter, opticalLOHParameter);
        }
    
        public virtual int UpdatePatientDoctors(string opticalLensSerailNumber, string opticalLensOptometrist, string opticalLensOptician)
        {
            var opticalLensSerailNumberParameter = opticalLensSerailNumber != null ?
                new ObjectParameter("OpticalLensSerailNumber", opticalLensSerailNumber) :
                new ObjectParameter("OpticalLensSerailNumber", typeof(string));
    
            var opticalLensOptometristParameter = opticalLensOptometrist != null ?
                new ObjectParameter("OpticalLensOptometrist", opticalLensOptometrist) :
                new ObjectParameter("OpticalLensOptometrist", typeof(string));
    
            var opticalLensOpticianParameter = opticalLensOptician != null ?
                new ObjectParameter("OpticalLensOptician", opticalLensOptician) :
                new ObjectParameter("OpticalLensOptician", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatientDoctors", opticalLensSerailNumberParameter, opticalLensOptometristParameter, opticalLensOpticianParameter);
        }
    
        public virtual int UpatePatientRemarks(string opticalLensSerialNumber, string opticalLensRemarks)
        {
            var opticalLensSerialNumberParameter = opticalLensSerialNumber != null ?
                new ObjectParameter("OpticalLensSerialNumber", opticalLensSerialNumber) :
                new ObjectParameter("OpticalLensSerialNumber", typeof(string));
    
            var opticalLensRemarksParameter = opticalLensRemarks != null ?
                new ObjectParameter("OpticalLensRemarks", opticalLensRemarks) :
                new ObjectParameter("OpticalLensRemarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpatePatientRemarks", opticalLensSerialNumberParameter, opticalLensRemarksParameter);
        }
    
        public virtual int UpdatePatientContactLens(string serialNumber, string contactRS, string contactRC, string contactRA, string contactRBC, string contactRDptr, string contactLS, string contactLC, string contactLA, string contactLBC, string contactLDptr)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var contactRSParameter = contactRS != null ?
                new ObjectParameter("ContactRS", contactRS) :
                new ObjectParameter("ContactRS", typeof(string));
    
            var contactRCParameter = contactRC != null ?
                new ObjectParameter("ContactRC", contactRC) :
                new ObjectParameter("ContactRC", typeof(string));
    
            var contactRAParameter = contactRA != null ?
                new ObjectParameter("ContactRA", contactRA) :
                new ObjectParameter("ContactRA", typeof(string));
    
            var contactRBCParameter = contactRBC != null ?
                new ObjectParameter("ContactRBC", contactRBC) :
                new ObjectParameter("ContactRBC", typeof(string));
    
            var contactRDptrParameter = contactRDptr != null ?
                new ObjectParameter("ContactRDptr", contactRDptr) :
                new ObjectParameter("ContactRDptr", typeof(string));
    
            var contactLSParameter = contactLS != null ?
                new ObjectParameter("ContactLS", contactLS) :
                new ObjectParameter("ContactLS", typeof(string));
    
            var contactLCParameter = contactLC != null ?
                new ObjectParameter("ContactLC", contactLC) :
                new ObjectParameter("ContactLC", typeof(string));
    
            var contactLAParameter = contactLA != null ?
                new ObjectParameter("ContactLA", contactLA) :
                new ObjectParameter("ContactLA", typeof(string));
    
            var contactLBCParameter = contactLBC != null ?
                new ObjectParameter("ContactLBC", contactLBC) :
                new ObjectParameter("ContactLBC", typeof(string));
    
            var contactLDptrParameter = contactLDptr != null ?
                new ObjectParameter("ContactLDptr", contactLDptr) :
                new ObjectParameter("ContactLDptr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatientContactLens", serialNumberParameter, contactRSParameter, contactRCParameter, contactRAParameter, contactRBCParameter, contactRDptrParameter, contactLSParameter, contactLCParameter, contactLAParameter, contactLBCParameter, contactLDptrParameter);
        }
    
        public virtual int UpdatePatientCLDoctors(string contactLensSerialNumber, string contactLensOptometrist, string contactLensOptician)
        {
            var contactLensSerialNumberParameter = contactLensSerialNumber != null ?
                new ObjectParameter("ContactLensSerialNumber", contactLensSerialNumber) :
                new ObjectParameter("ContactLensSerialNumber", typeof(string));
    
            var contactLensOptometristParameter = contactLensOptometrist != null ?
                new ObjectParameter("ContactLensOptometrist", contactLensOptometrist) :
                new ObjectParameter("ContactLensOptometrist", typeof(string));
    
            var contactLensOpticianParameter = contactLensOptician != null ?
                new ObjectParameter("ContactLensOptician", contactLensOptician) :
                new ObjectParameter("ContactLensOptician", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatientCLDoctors", contactLensSerialNumberParameter, contactLensOptometristParameter, contactLensOpticianParameter);
        }
    
        public virtual int UpdatePatientsCLRemakrs(string contactLensSerialNumber, string contactLensRemarks)
        {
            var contactLensSerialNumberParameter = contactLensSerialNumber != null ?
                new ObjectParameter("ContactLensSerialNumber", contactLensSerialNumber) :
                new ObjectParameter("ContactLensSerialNumber", typeof(string));
    
            var contactLensRemarksParameter = contactLensRemarks != null ?
                new ObjectParameter("ContactLensRemarks", contactLensRemarks) :
                new ObjectParameter("ContactLensRemarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatientsCLRemakrs", contactLensSerialNumberParameter, contactLensRemarksParameter);
        }
    
        public virtual int BackUpDatabase(string databaseName, string fileName)
        {
            var databaseNameParameter = databaseName != null ?
                new ObjectParameter("DatabaseName", databaseName) :
                new ObjectParameter("DatabaseName", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BackUpDatabase", databaseNameParameter, fileNameParameter);
        }
    
        public virtual int InsertUserAccounts(string firstName, string lastName, Nullable<byte> gender, Nullable<byte> position, string userName, string password, Nullable<byte> isActive)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(byte));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(byte));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserAccounts", firstNameParameter, lastNameParameter, genderParameter, positionParameter, userNameParameter, passwordParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<string> GetAccountsUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAccountsUsername", usernameParameter);
        }
    
        public virtual ObjectResult<GetUserAccounts_Result> GetUserAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserAccounts_Result>("GetUserAccounts");
        }
    
        public virtual ObjectResult<GetAccount_Result> GetAccount(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccount_Result>("GetAccount", usernameParameter, passwordParameter);
        }
    
        public virtual int UpdateUserAccount(Nullable<int> userId, string firstName, string lastName, string userName, Nullable<byte> gender, Nullable<byte> position)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(byte));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserAccount", userIdParameter, firstNameParameter, lastNameParameter, userNameParameter, genderParameter, positionParameter);
        }
    
        public virtual int BlockUserAccount(Nullable<int> userId, Nullable<byte> isActive)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BlockUserAccount", userIdParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<string> GetUserOldPassword(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUserOldPassword", userNameParameter);
        }
    
        public virtual int UpdateUserPassword(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserPassword", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetUsernamePassword_Result> GetUsernamePassword(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsernamePassword_Result>("GetUsernamePassword", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetTotalPatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetTotalPatients");
        }
    
        public virtual ObjectResult<Nullable<int>> GetTodayPatients(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetTodayPatients", dateParameter);
        }
    }
}
